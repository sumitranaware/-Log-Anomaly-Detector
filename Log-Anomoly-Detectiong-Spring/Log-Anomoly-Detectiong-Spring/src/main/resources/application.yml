spring:
  application:
    name: log-anomaly-detector

  jackson:
    # globally disable timestamps for all JavaTime types
    serialization:
      write-dates-as-timestamps: false

    # optional: enforce the exact ISO format with trailing 'Z'
    date-format: "yyyy-MM-dd'T'HH:mm:ss'Z'"
  datasource:
    url: jdbc:mysql://localhost:3306/log_anomaly?useSSL=false&serverTimezone=UTC
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

  kafka:
    bootstrap-servers: localhost:9092

    consumer:
      group-id: log-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.example.Log_Anomoly_Detectiong_Spring.entity
        spring.json.value.default.type: com.example.Log_Anomoly_Detectiong_Spring.entity.LogEntry

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

server:
  port: 8081

app:
  kafka:
    logs-topic: logs-topic
    anomalies-topic: anomalies


ml:
  service:
    url: http://localhost:8000/detect